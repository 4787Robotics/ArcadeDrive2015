
package org.usfirst.frc.team4787.robot;


import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Jaguar;

/**
 * This is a demo program showing the use of the RobotDrive class.
 * The SampleRobot class is the base of a robot application that will automatically call your
 * Autonomous and OperatorControl methods at the right time as controlled by the switches on
 * the driver station or the field controls.
 *
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SampleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 *
 * WARNING: While it may look like a good choice to use for your code if you're inexperienced,
 * don't. Unless you know what you are doing, complex code will be much more difficult under
 * this system. Use IterativeRobot or Command-Based instead if you're new.
 */
public class Robot extends SampleRobot {
	
    Joystick stick;

    Jaguar fLeft = new Jaguar(4);
    Jaguar bLeft = new Jaguar(5);
    Jaguar fRight= new Jaguar(7);
    Jaguar bRight = new Jaguar(8);
    final double DEADZONE = 0.15;
    double y, x;
    int signY, signX;
  
    
    public Robot() {
    	stick = new Joystick(0);
        
    }
    
    

    /**
     * Drive left & right motors for 2 seconds then stop
     */
    public void autonomous() {
    	
    }

    /**
     * Runs the motors with arcade steering.
     */
    public void operatorControl() {
        while (isOperatorControl() && isEnabled()) {

        	y = stick.getY();
        	x = stick.getX();
        	signY = (int)Math.signum(y);
        	signX = (int)Math.signum(x);
        	
        	//Emmet's WORKING Code! - Functional and smooth, but unintuitive
        	/*
        	if(Math.abs(y) > DEADZONE)
        	{
        		fLeft.set(-0.5*Math.signum(y)*Math.abs(y)*(1.5+(signY*x)));
        		bLeft.set(-0.5*Math.signum(y)*Math.abs(y)*(1.5+(signY*x)));
        		fRight.set(0.5*Math.signum(y)*Math.abs(y)*(1.5-(signY*x)));
        		bRight.set(0.5*Math.signum(y)*Math.abs(y)*(1.5-(signY*x)));
        	} else {
        		fLeft.set(x * 0.5);
        		bLeft.set(x * 0.5);
        		fRight.set(x * 0.5);
        		bRight.set(x * 0.5);
        	} */
        	
        	// Milos section - works and is intuitive
        	 
        	fLeft.set(stick.getX() - stick.getY());
        	bLeft.set(stick.getX() - stick.getY());
        	fRight.set(stick.getX() + stick.getY());
        	bRight.set(stick.getX() + stick.getY());
        	
        	
            Timer.delay(0.005);		// wait for a motor update time
        }
    }

    /**
     * Runs during test mode
     */
    public void test() {
    	//rawr
    	System.out.println("test function");
    }
    
    public void disabled()
    {
    	fLeft.set(0);
    	fRight.set(0);
    	bLeft.set(0);
    	bRight.set(0);
    	System.out.println("I prefer differently abled you ableist");
    }
}
